// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMatrix;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 lightDir;

attribute vec4 iTexposition;
attribute vec2 iTexCoord;
uniform float u_scale;
uniform float u_offset;
varying vec2 v_texCoord;

varying vec3 vertColor;

uniform bool DrawPoint;
uniform vec3 PointWorldLocation;
uniform vec2 UserPointLocation;

mat3 trans(vec2 UserPointLocation){
    mat3 tr = mat3(vec3(1.0, 0.0, 0.0),
                   vec3(0.0, 1.0, 0.0),
                   vec3(UserPointLocation.x, UserPointLocation.y, 1.0));

    return tr;
}

mat3 scaling(float u_scale) {
    mat3 sc = mat3(vec3(u_scale, 0.0, 0.0),
                   vec3(0.0, u_scale, 0.0),
                   vec3(0.0, 0.0,  1.0));

    return sc;
}

vec2 getTextCoordinates(float u_scale, vec2 UserPointLocation, vec2 iTexCoord ){
        vec3 TextCoords = vec3(iTexCoord, 1);
        mat3 scaled_texture = scaling(u_scale);
        mat3 translation = trans(-UserPointLocation);
        mat3 translationBack = trans(UserPointLocation);

        TextCoords = translation * TextCoords;
        TextCoords = scaled_texture * TextCoords;
        TextCoords = translationBack * TextCoords;
        return TextCoords.xy;
}

void main(){

  if (DrawPoint == true){
    gl_Position = ModelViewProjectionMatrix * vec4(PointWorldLocation, 1.0);
    gl_PointSize = 10.0;
  }
  else{
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 N = normalize(vec3(normalMatrix * vec4(normal, 0.0)));
    vec3 L = normalize(lightDir);
    float lambertian = max(dot(N, L), 0.0);
    vertColor = ambientColor + lambertian * diffuseColor;

    v_texCoord = getTextCoordinates(u_scale, UserPointLocation, iTexCoord);
    gl_Position = vertPos4;
    gl_PointSize = 1.0;
  }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vertColor;
varying vec2 v_texCoord;
uniform sampler2D tmu;
vec4 dotColor = vec4(0.2, 0.2, 0.2, 0);
uniform bool DrawPoint;

void main() {
  if (DrawPoint == true){
    gl_FragColor = dotColor;
  }
  else{
    gl_FragColor = vec4(vertColor, 1.0) * texture2D(tmu, v_texCoord);
  }
}`;