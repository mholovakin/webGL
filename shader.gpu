// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMatrix;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 lightDir;


varying vec3 vertColor;

void main(){
  vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
  vec3 N = normalize(vec3(normalMatrix * vec4(normal, 0.0)));
  vec3 L = normalize(lightDir);
  float lambertian = max(dot(N, L), 0.0);
  vertColor = ambientColor + lambertian * diffuseColor;
  gl_Position = vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vertColor;

void main() {
  gl_FragColor = vec4(vertColor, 1.0);
}`;